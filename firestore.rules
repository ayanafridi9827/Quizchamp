rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // =====================================================================
    // Helper Functions
    // =====================================================================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
             ((exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin') ||
              request.auth.token.email == 'ayanafridi752@gmail.com');
    }

    // =====================================================================
    // User, Wallet, and Referral Rules
    // =====================================================================

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isAdmin();
    }

    match /wallets/{userId} {
      allow read, create, delete: if isOwner(userId);
      // Allow another authenticated user to update this wallet ONLY for a referral bonus
      allow update: if isOwner(userId) || (
        isAuthenticated() &&
        request.auth.uid != userId && // Must not be the owner
        // Check that only the expected fields are being changed
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['balance', 'deposits', 'lastTransaction']) &&
        // Check that the balance is being incremented by exactly 15
        request.resource.data.balance == resource.data.balance + 15 &&
        // Check that only one item is being added to the deposits array
        request.resource.data.deposits.size() == resource.data.deposits.size() + 1 &&
        // Check the content of the newly added deposit item
        request.resource.data.deposits[request.resource.data.deposits.size() - 1].type == 'Referral' &&
        request.resource.data.deposits[request.resource.data.deposits.size() - 1].amount == 15
      );
    }

    match /referrals/{userId} {
      allow read: if isAuthenticated();
      allow create, delete: if isOwner(userId);
      // Allow another authenticated user to update this referral doc ONLY to add themselves
      allow update: if isOwner(userId) || (
        isAuthenticated() &&
        request.auth.uid != userId && // Must not be the owner
        // Check that only the expected fields are being changed
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['joined', 'earnings']) &&
        // Check that earnings are being incremented by exactly 15
        request.resource.data.earnings == resource.data.earnings + 15 &&
        // Check that only one user is being added to the 'joined' list
        request.resource.data.joined.size() == resource.data.joined.size() + 1 &&
        // Check that the user being added is the one making the request
        request.auth.uid in request.resource.data.joined
      );
    }

    // Rule for referral collection queries
    match /referrals {
      // Allows users to query the collection to find a referral code.
      allow list: if isAuthenticated();
    }

    // =====================================================================
    // Other Collections
    // =====================================================================

    match /users {
      allow list: if isAdmin();
    }

    match /contests/{contestId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      // Admins can update any field on a contest
      allow update: if isAdmin();

      // Authenticated users can join a contest if they meet the criteria
      allow update: if isAuthenticated() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'filledSpots']) &&
        request.resource.data.participants.hasAny([request.auth.uid]) &&
        !resource.data.participants.hasAny([request.auth.uid]) &&
        request.resource.data.filledSpots == resource.data.filledSpots + 1 &&
        request.resource.data.filledSpots <= resource.data.maxSpots;
      allow delete: if isAdmin();

      match /participants/{participantId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
      }

      match /results/{userId} {
        allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
        allow write: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      }
    }

    match /contests {
      allow list: if isAuthenticated();
    }

    match /quiz/{quizId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /quizzes {
      allow list: if isAuthenticated() || isAdmin();
    }

    match /userChallenges/{userChallengeId} {
      allow read: if isAuthenticated() && (userChallengeId.matches(request.auth.uid + '_.*') || isAdmin());
      allow create: if isAuthenticated() && userChallengeId.matches(request.auth.uid + '_.*');
      allow update: if isAuthenticated() &&
        userChallengeId.matches(request.auth.uid + '_.*') &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'lastUpdated']);
      allow delete: if isAdmin();
    }

    match /userContests/{userContestId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    match /adminSettings/{settingId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == adminId;
      allow update: if isOwner(adminId);
      allow delete: if isAdmin();
    }

    match /auth/{document=**} {
      allow read, write: if true;
    }

    match /adminAuth/{document=**} {
      allow read, write: if request.auth != null && request.auth.token.email == 'ayanafridi752@gmail.com';
    }

    match /results/{resultId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
    }

    match /withdrawalRequests/{withdrawalId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /withdrawalRequests {
      allow list: if isAdmin() || (isAuthenticated() && request.query.where.userId == request.auth.uid);
    }
  }
}