rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // =====================================================================
    // Helper Functions
    // =====================================================================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
             ((exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin') ||
              request.auth.token.email == 'ayanafridi752@gmail.com');
    }

    // =====================================================================
    // User, Wallet, and Referral Rules
    // =====================================================================

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    match /wallets/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    match /referrals/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if 
        // Allow a user to set who referred them, but only once.
        (isOwner(userId) && resource.data.referredBy == null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['referredBy'])) ||
        // Allow another user to update the 'joined' and 'earnings' fields of this user's referral doc.
        (isAuthenticated() && request.auth.uid != userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['joined', 'earnings']));
    }

    // Rule for referral collection queries
    match /referrals {
      // Allows users to query the collection to find a referral code.
      allow list: if isAuthenticated();
      allow get: if isAuthenticated();
    }

    // =====================================================================
    // Other Collections
    // =====================================================================

    match /users {
      allow list: if isAdmin();
    }

    match /contests/{contestId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAdmin();
      // Allow a user to add themselves to the participants list.
      allow update: if isAuthenticated() && 
        request.resource.data.participants.size() == resource.data.participants.size() + 1 &&
        request.auth.uid in request.resource.data.participants &&
        !(request.auth.uid in resource.data.participants);
    }

    match /contests {
      allow list: if isAuthenticated();
    }

    match /quiz/{quizId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /quizzes {
      allow list: if isAuthenticated() || isAdmin();
    }

    match /userChallenges/{userChallengeId} {
      allow read: if isAuthenticated() && (userChallengeId.matches(request.auth.uid + '_.*') || isAdmin());
      allow create: if isAuthenticated() && userChallengeId.matches(request.auth.uid + '_.*');
      allow update: if isAuthenticated() &&
        userChallengeId.matches(request.auth.uid + '_.*') &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'lastUpdated']);
      allow delete: if isAdmin();
    }

    match /userContests/{userContestId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    match /adminSettings/{settingId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == adminId;
      allow update: if isOwner(adminId);
      allow delete: if isAdmin();
    }

    match /auth/{document=**} {
      allow read, write: if true;
    }

    match /adminAuth/{document=**} {
      allow read, write: if request.auth != null && request.auth.token.email == 'ayanafridi752@gmail.com';
    }

    match /results/{resultId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
    }

    match /withdrawalRequests/{withdrawalId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /withdrawalRequests {
      allow list: if isAdmin() || (isAuthenticated() && request.query.where.userId == request.auth.uid);
    }

    match /challenges/{challengeId} {
      allow read, write, create, delete: if isAdmin();

      match /participants/{participantId} {
        allow read, write, create, delete: if isAdmin();
      }
    }
  }
}