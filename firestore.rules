rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // =====================================================================
    // Helper Functions
    // =====================================================================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
             ((exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin') ||
              request.auth.token.email == 'ayanafridi752@gmail.com');
    }

    // =====================================================================
    // User, Wallet, and Referral Rules
    // =====================================================================

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();

      allow create: if isOwner(userId) &&
                     request.resource.data.uid == userId &&
                     request.resource.data.name is string &&
                     request.resource.data.email == request.auth.token.email &&
                     request.resource.data.photoURL is string &&
                     request.resource.data.role == 'user' &&
                     request.resource.data.contests is list &&
                     request.resource.data.createdAt == request.time &&
                     request.resource.data.lastLogin == request.time;

      allow update: if isOwner(userId) &&
                     request.resource.data.uid == resource.data.uid &&
                     request.resource.data.email == resource.data.email &&
                     request.resource.data.role == resource.data.role &&
                     request.resource.data.createdAt == resource.data.createdAt &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'photoURL', 'lastLogin', 'contests', 'challengeHistory', 'totalChallengesJoined']);
    }

    match /wallets/{walletId} {
      allow read: if isOwner(walletId) || isAdmin();
      allow create: if isOwner(walletId) &&
                     request.resource.data.balance == 0 &&
                     request.resource.data.deposits is list &&
                     request.resource.data.deposits.size() == 0 &&
                     request.resource.data.withdraws is list &&
                     request.resource.data.withdraws.size() == 0 &&
                     request.resource.data.createdAt == request.time;
      allow update: if isOwner(walletId);
    }

    match /referrals/{referralId} {
      allow read: if isAuthenticated();
      allow update: if isOwner(referralId);
      allow create: if isOwner(referralId) &&
                     request.resource.data.code is string &&
                     request.resource.data.referredBy == null &&
                     request.resource.data.joined is list &&
                     request.resource.data.joined.size() == 0 &&
                     request.resource.data.earnings == 0 &&
                     request.resource.data.createdAt == request.time;
    }

    // =====================================================================
    // Other Collections
    // =====================================================================

    match /users {
      allow list: if isAdmin();
    }

    match /contests/{contestId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin() || (
        isAuthenticated() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'filledSpots']) &&
        request.resource.data.participants.hasAny([request.auth.uid]) &&
        !resource.data.participants.hasAny([request.auth.uid]) &&
        request.resource.data.filledSpots == resource.data.filledSpots + 1 &&
        request.resource.data.filledSpots <= resource.data.maxSpots
      );
      allow delete: if isAdmin();

      match /participants/{participantId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
      }

      match /results/{userId} {
        allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
        allow write: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      }
    }

    match /contests {
      allow list: if isAuthenticated();
    }

    match /quiz/{quizId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /quizzes {
      allow list: if isAuthenticated() || isAdmin();
    }

    match /userChallenges/{userChallengeId} {
      allow read: if isAuthenticated() && (userChallengeId.matches(request.auth.uid + '_.*') || isAdmin());
      allow create: if isAuthenticated() && userChallengeId.matches(request.auth.uid + '_.*');
      allow update: if isAuthenticated() &&
        userChallengeId.matches(request.auth.uid + '_.*') &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'lastUpdated']);
      allow delete: if isAdmin();
    }

    match /userContests/{userContestId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    match /adminSettings/{settingId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == adminId;
      allow update: if isOwner(adminId);
      allow delete: if isAdmin();
    }

    match /auth/{document=**} {
      allow read, write: if true;
    }

    match /adminAuth/{document=**} {
      allow read, write: if request.auth != null && request.auth.token.email == 'ayanafridi752@gmail.com';
    }

    match /results/{resultId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
    }

    match /withdrawalRequests/{withdrawalId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /withdrawalRequests {
      allow list: if isAdmin();
    }
  }
}